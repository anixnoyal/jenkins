---
- name: Jenkins Maintenance Playbook
  hosts: localhost
  become: yes
  connection: local
  vars:
    notification_email: "admin@example.com"
    jenkins_pid: "{{ lookup('pipe', 'pgrep -f jenkins.war') }}"
    artifactory_url: "http://artifactory.example.com/artifactory/my-repo"
    artifactory_user: "your_username"
    artifactory_password: "your_password"
    jenkins_start_timeout: 1800  # Timeout in seconds (30 minutes)
    jenkins_check_interval: 60   # Check interval in seconds (1 minute)

  tasks:
    - name: Gather system facts
      setup:

    - name: Take Jenkins thread dump
      shell: >
        jcmd {{ jenkins_pid }} Thread.print > /tmp/jenkins_thread_dump_{{ ansible_date_time.epoch }}.txt
      register: thread_dump_result
      failed_when: thread_dump_result.rc != 0
    - name: Display thread dump status
      debug:
        msg: "Thread dump status: {{ thread_dump_result.rc == 0 | ternary('SUCCESS', 'FAILED') }}"

    - name: Fail if thread dump failed
      fail:
        msg: "Thread dump failed on host {{ inventory_hostname }}. Stopping playbook."
      when: thread_dump_result.rc != 0

    - name: Take Jenkins heap dump
      shell: >
        jcmd {{ jenkins_pid }} GC.heap_dump /tmp/jenkins_heap_dump_{{ ansible_date_time.epoch }}.hprof
      register: heap_dump_result
      failed_when: heap_dump_result.rc != 0
      when: thread_dump_result.rc == 0
    - name: Display heap dump status
      debug:
        msg: "Heap dump status: {{ heap_dump_result.rc == 0 | ternary('SUCCESS', 'FAILED') }}"
      when: thread_dump_result.rc == 0

    - name: Fail if heap dump failed
      fail:
        msg: "Heap dump failed on host {{ inventory_hostname }}. Stopping playbook."
      when: heap_dump_result.rc != 0

    - name: Stop sendmail service
      service:
        name: sendmail
        state: stopped
      register: stop_sendmail_result
      failed_when: stop_sendmail_result.state != 'stopped'
      when: heap_dump_result.rc == 0
    - name: Display sendmail stop status
      debug:
        msg: "Sendmail stop status: {{ stop_sendmail_result.state == 'stopped' | ternary('SUCCESS', 'FAILED') }}"
      when: heap_dump_result.rc == 0

    - name: Fail if stopping sendmail failed
      fail:
        msg: "Stopping sendmail failed on host {{ inventory_hostname }}. Stopping playbook."
      when: stop_sendmail_result.state != 'stopped'

    - name: Stop Jenkins service
      service:
        name: jenkins
        state: stopped
      register: stop_jenkins_result
      failed_when: stop_jenkins_result.state != 'stopped'
      when: stop_sendmail_result.state == 'stopped'
    - name: Display Jenkins stop status
      debug:
        msg: "Jenkins stop status: {{ stop_jenkins_result.state == 'stopped' | ternary('SUCCESS', 'FAILED') }}"
      when: stop_sendmail_result.state == 'stopped'

    - name: Fail if stopping Jenkins failed
      fail:
        msg: "Stopping Jenkins failed on host {{ inventory_hostname }}. Stopping playbook."
      when: stop_jenkins_result.state != 'stopped'

    - name: Start Jenkins service
      service:
        name: jenkins
        state: started
      register: start_jenkins_result
      until: start_jenkins_result.status == 'started'
      retries: "{{ (jenkins_start_timeout // jenkins_check_interval) | default(0) }}"
      delay: "{{ jenkins_check_interval }}"
      ignore_errors: yes
    - name: Display Jenkins start status
      debug:
        msg: "Jenkins start status: {{ start_jenkins_result.status }}"
      when: start_jenkins_result.status == 'started'

    - name: Fail if starting Jenkins failed
      fail:
        msg: "Starting Jenkins failed on host {{ inventory_hostname }}. Stopping playbook."
      when: start_jenkins_result.status != 'started'

    - name: Start sendmail service
      service:
        name: sendmail
        state: started
      register: start_sendmail_result
      failed_when: start_sendmail_result.state != 'started'
      when: start_jenkins_result.status == 'started'
    - name: Display sendmail start status
      debug:
        msg: "Sendmail start status: {{ start_sendmail_result.state == 'started' | ternary('SUCCESS', 'FAILED') }}"
      when: start_jenkins_result.status == 'started'

    - name: Fail if starting sendmail failed
      fail:
        msg: "Starting sendmail failed on host {{ inventory_hostname }}. Stopping playbook."
      when: start_sendmail_result.state != 'started'

    - name: Create tar.gz of dumps
      archive:
        path:
          - /tmp/jenkins_thread_dump_{{ ansible_date_time.epoch }}.txt
          - /tmp/jenkins_heap_dump_{{ ansible_date_time.epoch }}.hprof
        dest: /tmp/jenkins_dumps_{{ ansible_date_time.epoch }}.tar.gz
      when: thread_dump_result.rc == 0 and heap_dump_result.rc == 0

    - name: Upload tar.gz to Artifactory
      uri:
        url: "{{ artifactory_url }}/jenkins_dumps_{{ ansible_date_time.epoch }}.tar.gz"
        method: PUT
        user: "{{ artifactory_user }}"
        password: "{{ artifactory_password }}"
        body: "{{ lookup('file', '/tmp/jenkins_dumps_{{ ansible_date_time.epoch }}.tar.gz') }}"
        headers:
          Content-Type: application/octet-stream
        status_code: 201
      when: thread_dump_result.rc == 0 and heap_dump_result.rc == 0

    - name: Remove temporary dump files
      file:
        path: "/tmp/jenkins_thread_dump_{{ ansible_date_time.epoch }}.txt"
        state: absent
      when: thread_dump_result.rc == 0 and heap_dump_result.rc == 0

    - name: Remove temporary heap dump files
      file:
        path: "/tmp/jenkins_heap_dump_{{ ansible_date_time.epoch }}.hprof"
        state: absent
      when: thread_dump_result.rc == 0 and heap_dump_result.rc == 0

    - name: Remove temporary tar.gz file
      file:
        path: "/tmp/jenkins_dumps_{{ ansible_date_time.epoch }}.tar.gz"
        state: absent
      when: thread_dump_result.rc == 0 and heap_dump_result.rc == 0

    - name: Get Jenkins service status
      command: systemctl status jenkins
      register: jenkins_status

    - name: Get filesystem disk space usage
      command: df -hT
      register: disk_usage

    - name: Send success email
      mail:
        host: localhost
        to: "{{ notification_email }}"
        subject: "Jenkins Maintenance Playbook Success"
        body: |
          All steps completed successfully on host {{ ansible_facts['hostname'] }}.

          Jenkins service status:
          {{ jenkins_status.stdout }}

          Filesystem disk space usage:
          {{ disk_usage.stdout }}
      when: thread_dump_result.rc == 0 and heap_dump_result.rc == 0 and stop_sendmail_result.state == 'stopped' and stop_jenkins_result.state == 'stopped' and start_jenkins_result.status == 'started' and start_sendmail_result.state == 'started'
